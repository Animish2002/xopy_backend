generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums for Print Preferences
enum PrintJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PrintType {
  COLOR
  BLACK_WHITE
}

enum PaperType {
  A0
  A1
  A2
  A3
  A4
  A5
  LEGAL
  LETTER
  TABLOID
}

enum PrintSide {
  SINGLE_SIDED
  DOUBLE_SIDED
}

enum Role {
  CUSTOMER
  SHOP_OWNER
  ADMIN
}

// ==========================
// Models
// ==========================

// User Model (Common for all users: customers, shop owners, admins)
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  phoneNumber  String   @unique
  address      String?
  role         Role     @default(SHOP_OWNER)
  isVerified   Boolean  @default(false) // Future use: If needed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  shopOwnerInfo ShopOwner? // Only if the user is a shop owner
  printJobs     PrintJob[] // Print jobs uploaded by customers
}

// ShopOwner Extra Info
model ShopOwner {
  id        String  @id @default(uuid())
  userId    String  @unique // Link to User
  shopName  String
  qrCodeUrl String? // URL for generated QR Code

  user          User            @relation(fields: [userId], references: [id])
  pricingConfig PricingConfig[]
  printJobs     PrintJob[] // Print jobs assigned to their shop

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Print Job
model PrintJob {
  id            String         @id @default(uuid())
  userId        String? // Customer who uploaded (optional)
  shopOwnerId   String // Shop where job is being printed
  tokenNumber   String         @unique
  noofCopies    Int
  printType     PrintType?
  paperType     PaperType?
  printSide     PrintSide?
  specificPages String?
  totalPages    Int            @default(0)
  totalCost     Decimal        @default(0)
  status        PrintJobStatus @default(PENDING)

  // Relations
  files     PrintJobFile[]
  customer  User?          @relation(fields: [userId], references: [id])
  shopOwner ShopOwner      @relation(fields: [shopOwnerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Uploaded files for each PrintJob
model PrintJobFile {
  id            String  @id @default(uuid())
  printJobId    String
  fileName      String
  fileUrl       String
  fileType      String
  encryptedHash String?
  pages         Int     @default(1)

  printJob PrintJob @relation(fields: [printJobId], references: [id])

  createdAt DateTime @default(now())
}

// Pricing for different papers/types for each Shop
model PricingConfig {
  id          String    @id @default(uuid())
  shopOwnerId String
  paperType   PaperType
  printType   PrintType
  singleSided Decimal   @default(0)
  doubleSided Decimal   @default(0)

  shopOwner ShopOwner @relation(fields: [shopOwnerId], references: [id])

  createdAt DateTime @default(now())

  @@unique([shopOwnerId, paperType, printType])
}

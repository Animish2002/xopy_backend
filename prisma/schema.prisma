generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  passwordHash  String
  phoneNumber   String     @unique
  address       String?
  role          Role       @default(SHOP_OWNER)
  isVerified    Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  printJobs     PrintJob[]
  shopOwnerInfo ShopOwner?
}

model ShopOwner {
  id            String          @id @default(uuid())
  userId        String          @unique
  shopName      String
  qrCodeUrl     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  pricingConfig PricingConfig[]
  printJobs     PrintJob[]
  user          User            @relation(fields: [userId], references: [id])
}

model PrintJob {
  id            String         @id @default(uuid())
  userId        String?
  shopOwnerId   String
  tokenNumber   String         @unique
  noofCopies    Int
  printType     PrintType?
  paperType     PaperType?
  printSide     PrintSide?
  specificPages String?
  totalPages    Int            @default(0)
  totalCost     Decimal        @default(0)
  status        PrintJobStatus @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  shopOwner     ShopOwner      @relation(fields: [shopOwnerId], references: [id])
  customer      User?          @relation(fields: [userId], references: [id])
  files         PrintJobFile[]
}

model PrintJobFile {
  id            String   @id @default(uuid())
  printJobId    String
  fileName      String
  fileUrl       String
  fileType      String
  encryptedHash String?
  pages         Int      @default(1)
  createdAt     DateTime @default(now())
  printJob      PrintJob @relation(fields: [printJobId], references: [id])
}

model PricingConfig {
  id          String    @id @default(uuid())
  shopOwnerId String
  paperType   PaperType
  printType   PrintType
  singleSided Decimal   @default(0)
  doubleSided Decimal   @default(0)
  createdAt   DateTime  @default(now())
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])

  @@unique([shopOwnerId, paperType, printType])
}

enum PrintJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PrintType {
  COLOR
  BLACK_WHITE
}

enum PaperType {
  A0
  A1
  A2
  A3
  A4
  A5
  LEGAL
  LETTER
  TABLOID
}

enum PrintSide {
  SINGLE_SIDED
  DOUBLE_SIDED
}

enum Role {
  CUSTOMER
  SHOP_OWNER
  ADMIN
}
